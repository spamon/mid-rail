def handle_perfect_fit_shutters(order_data, customer_name, delivery_option):
    try:
        root = ET.Element("Order")
        excel_files_to_print = []  # New list to collect file paths
        
        cust_order_ref = f"EM/{customer_name.split()[-1].upper()}"
        root.set("AccountName", customer_name)
        root.set("AccountCode", "C001268")
        root.set("CustOrderRef", cust_order_ref)
        root.set("CustOrderID", datetime.now().strftime("%Y%m%d"))
        root.set("OrderDate", datetime.now().strftime("%d/%m/%Y"))
        root.set("OS", "Platform: Win32NT         Version: 6.2.9200.0")
        root.set("DeliveryLocationID", "000007567")
        root.set("DeliveryLocationName", "McGRATHS CARPETS BLINDS &")
        root.set("USCCVersion", "1.3.0.0")
        root.set("UrbanShutterOption", "UrbanShutterLiteStilesOnly")

        due_date = calculate_due_date(delivery_option)
        
        item_number = 1
        for shutter in order_data:
            if shutter.get('Product Type') == 'Perfect Fit Shutter':
                quantity = int(shutter.get('Quantity', '1'))
                for _ in range(quantity):
                    item = ET.SubElement(root, "Item")
                    
                    panel_qty = int(shutter.get('Number Of Panels', '1'))
                    if panel_qty > 1:
                        valid_configurations = {
                            2: ["LL", "LR", "RL", "RR"],
                            3: ["LLL", "RRR", "LRL", "RLR"],
                            4: ["LLLL", "RRRR", "LLRR", "RLLR"],
                        }
                        if panel_qty in valid_configurations:
                            print(f"Detected {panel_qty} panels. Please choose a configuration:")
                            print(f"Options: {', '.join(valid_configurations[panel_qty])}")
                            while True:
                                panel_config = input("Enter the panel configuration: ").strip().upper()
                                if panel_config in valid_configurations[panel_qty]:
                                    break
                                print("Invalid configuration. Please try again.")
                        else:
                            panel_config = "LL"  # Default if no specific config available
                    else:
                        panel_config = shutter.get('Tilt Control Side', 'L')[0].upper()

                    item.set("PanelConfiguration", panel_config)
                    
                    item.set("ItemNumber", str(item_number))
                    item.set("PanelQty", str(panel_qty))
                    shutter_color = shutter.get('ShutterColour', 'COTTON WHITE').upper()
                    item.set("ShutterColour", shutter_color)
                    item.set("LouvreSize", shutter.get('LouvreSize', '63mm'))
                    item.set("Width", shutter.get('Width', '0'))
                    item.set("Drop", shutter.get('Drop', '0'))
                    
                    # Set ShutterStyle based on midrail presence
                    has_midrail = shutter.get('Shutter Midrail', 'No').lower() == 'yes'
                    item.set("ShutterStyle", "DIVIDER RAIL" if has_midrail else "FULL HEIGHT")
                    
                    # Calculate and set DivRailPosFirst if midrail is present
                    if has_midrail:
                        length = int(convert_to_mm(shutter.get('Length', '0')))
                        div_rail_pos = (length // 2)  # Removed +23
                        item.set("DivRailPosFirst", str(div_rail_pos))
                    
                    item.set("WindowDepth", extract_numeric(shutter.get('Bead Depth', '22')))
                    item.set("UrbanShutterOption", shutter.get('UrbanShutterOption', 'Urban Shutter Lite - Stiles Only'))
                    item.set("WindowHandleCentered", shutter.get('WindowHandleCentered', 'No'))
                    
                    handle_rebate_position = shutter.get('Handle Location', 'None')
                    item.set("HandleRebatePosition", handle_rebate_position)
                    
                    if handle_rebate_position.lower() != 'none':
                        handle_position = shutter.get('Handle Position', '0')
                        custom_handle_rebate_position = calculate_custom_handle_rebate_position(handle_position, handle_rebate_position)
                        item.set("CustomHandleRebatePosition", custom_handle_rebate_position)

                        if custom_handle_rebate_position == 'centre':
                            item.set("WindowHandleCentered", "Yes")
                        else:
                            item.set("WindowHandleCentered", "No")
                            item.set("CustomHandleRebatePosition", custom_handle_rebate_position)
                    
                    item.set("Buildout", shutter.get('Buildout', 'None'))
                    item.set("TiltBarSplit1", extract_numeric(shutter.get('TiltBarSplit1', '0')))
                    item.set("TiltBarSplit2", extract_numeric(shutter.get('TiltBarSplit2', '0')))
                    item.set("RailSize", shutter.get('RailSize', '50mm'))
                    item.set("ClosingSystem", shutter.get('ClosingSystem', 'SpringCatch'))
                    
                    if 'Blind Location' in shutter:
                        item.set("BlindLocation", shutter['Blind Location'])
                    
                    shutter_data = calculate_shutter_components(shutter)
                    shutter_data['Order Number'] = cust_order_ref
                    shutter_data['Panel Configuration'] = panel_config
                    shutter_data['Customer Name'] = customer_name
                    shutter_data['Blind Location'] = shutter.get('Blind Location', '')
                    shutter_data['Colour'] = shutter_color
                    
                    safe_customer_name = "".join(x for x in customer_name if x.isalnum() or x in [' ', '_']).rstrip()
                    excel_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "output", f'{safe_customer_name}_shutter_{item_number}.xlsx')
                    
                    # Generate worksheet with is_first_sheet flag for the first item only
                    generate_shutter_worksheet(
                        shutter_data, 
                        excel_file_path, 
                        delivery_option,
                        is_first_sheet=(item_number == 1)
                    )

                    # Add file path to list for batch printing
                    excel_files_to_print.append(excel_file_path)
                    logging.info(f"Excel file created: {excel_file_path}")
                    
                    item_number += 1

        tree = ET.ElementTree(root)

        output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "output")
        os.makedirs(output_dir, exist_ok=True)

        safe_customer_name = "".join(x for x in customer_name if x.isalnum() or x in [' ', '_']).rstrip()
        xml_filename = f"{safe_customer_name}_shutters.xml"
        file_path = os.path.join(output_dir, xml_filename)

        tree.write(file_path, encoding="utf-8", xml_declaration=True)

        logging.info(f"XML file created successfully: {file_path}")

        # Batch print all Excel files
        logging.info("Starting batch printing of all worksheets...")
        for file_path in excel_files_to_print:
            print_excel_file(file_path)
        logging.info("Completed printing all worksheets")

        return file_path

    except Exception as e:
        logging.error(f"Error creating XML file for {customer_name}: {str(e)}")
        return None
